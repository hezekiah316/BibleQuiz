#!/bin/bash

#   **********************************************************
#
#   Processes files for use on Bible Quiz web site:
#
#   1. Makes a single JavaScript file for the BQ site
#      from the various individual in-house JavaScript files
#   2. Checks the validity of all PHP files, to check for potential 
#      errors
#   3. Compresses JavaScript and CSS files
#
#   This utility must be used to upload files to the Bible Quiz site.
# 
#   Pass the FTP username (required) and password (required), and 
#   whether to minify JavaScript and CSS files (optional) as parameters:
#
#	   $ makebq <FTP username> <FTP password> [--minify]
#
#
#   @author JJF (2/28/15)
#
#   **********************************************************


########################

USAGE="Usage: $0 [--help] [--minify] <FTP username> <FTP password>"

# username/password for FTP passed in as first two command line parameters
SERVER_SITE=ftp.hezekiah316.com
SERVER_UN=
SERVER_PW=

# Whether to use minified JavaScript/CSS passed in as the third command line parameter
MINIFY="false"


# Check input parameters
while (( "$#" )); do

   if [[ "$1" == "--help" ]]; then
      echo "$USAGE"
      exit 1
   elif [[ "$1" == "--minify" ]]; then
      MINIFY="true"
   elif [[ "$SERVER_UN" == "" ]]; then
      SERVER_UN=$1
   elif [[ "$SERVER_PW" == "" ]]; then
      SERVER_PW=$1
   else
      echo "Wrong number of parameters."
      echo "$USAGE"
      exit 1
   fi
   
   shift
   
done





########################
# Set local variables for use in this batch file


# Locations of subprojects
BQ=../biblequiz
DB=../bq_database
PC=../php_classes

# Various files/groups of files
ERRORFILE="./BQ.err"
HTMLFILES="$BQ/pages/*.inc"
JS_FILES="$BQ/javascript/*.js"
MANIFEST="BQ.manifest"
OUTFILE="$BQ/BQ.js"
PHP_FILES="$BQ/BQ_ajax.php $PC/*.php"
TEMPFILE="BQ.temp.js"
VERSIONFILE="$BQ/javascript/BQ.Version.js"





# Create version number
VERSION=`date +%Y.%m.%d.%H.%M.%S`

echo Creating new BQ version $VERSION ...
rm $VERSIONFILE
echo -e "\n/* global BQ:true */\nBQ.sLibraryVersion=\"$VERSION\";\n/**/" >> $VERSIONFILE

########################
# Create single large HTML file from individual BQ files

echo Removing old files ...
rm -f $BQ/index.html
rm -f $BQ/$MANIFEST
rm -f $OUTFILE
rm -f $ERRORFILE

echo Copying pages into index.html ...
cat $HTMLFILES > $BQ/index.html

########################
# Create single large JavaScript file from individual BQ files

echo Checking validity of JavaScript files ...
for J in $(ls $JS_FILES); do

   jshint --config jshintrc $J  >> $ERRORFILE

done

if [[ ! -s "$ERRORFILE" ]]; then
   rm -f $ERRORFILE 
fi

if [[ ! -e "$ERRORFILE" ]]; then

	echo Copying JavaScript files to $TEMPFILE ...
	cat $JS_FILES > $TEMPFILE
	
	if [[ "$MINIFY" == "true" ]]; then
	
	   echo Minifying $TEMPFILE as $OUTFILE ...
	   uglifyjs $TEMPFILE --compress --mangle --output $OUTFILE  2> $ERRORFILE
	
	
	   echo Minifying CSS files ...
	   uglifycss $BQ/css/BQ.source.css > $CSS_COMMON.css  2> $ERRORFILE
	   
	else
	
	   echo Copying $TEMPFILE to $OUTFILE ...
	   cat $TEMPFILE > $OUTFILE
	   
	   echo Copying CSS files ...
	   cat $BQ/css/BQ.source.css > $BQ/BQ.css
	
	
	fi
	
	# Delete temporary file
	rm -f $TEMPFILE
	
fi


########################
# Check validity of all PHP files

echo Checking validity of PHP files ...
for P in $(ls $PHP_FILES); do

   php -l $P | grep -v "No syntax errors detected" >> $ERRORFILE

done

########################
# Create new manifest file

if [[ ! -s "$ERRORFILE" ]]; then
   rm -f $ERRORFILE 
fi
if [[ ! -e "$ERRORFILE" ]]; then

	echo Creating new manifest file 
	echo -e "CACHE MANIFEST\n#\n# Version $VERSION\n#" >> $TEMPFILE
	cat $TEMPFILE $BQ/pages/$MANIFEST >> $BQ/$MANIFEST
	rm -f $TEMPFILE

fi

########################
# Display directory listing for new BQ*.* files
if [[ ! -s "$ERRORFILE" ]]; then
   rm -f $ERRORFILE 
fi
if [[ ! -e "$ERRORFILE" ]]; then

	ls -l $BQ/BQ*.*
	ls -l $BQ/index.html

fi

########################
# display error file; delete it if it's empty
if [[ ! -s "$ERRORFILE" ]]; then
   rm -f $ERRORFILE 
elif [[ -e "$ERRORFILE" ]]; then
   cat $ERRORFILE
fi

########################
# Copy files to FTP server
if [[ !(-e "$ERRORFILE") && ("$SERVER_UN" != "") && ("$SERVER_PW" != "") ]]; then

  
   echo Copying files to FTP server on $SERVER_SITE

   # -n option disables auto-logon
   # -i option turns off interactive file transfers
   # -v verbose, useful for debugging   


   ftp -n -i $SERVER_SITE <<End-Of-Session
   
   user $SERVER_UN $SERVER_PW
   binary
   cd /public_html/biblequiz
   put $BQ/index.html
   mput $BQ/BQ*.* 
   mput $BQ/images/*.png
   mput $BQ/jquery/*.css
   mput $BQ/jquery/*.js
   mput $BQ/jquery/*.map
   put  $BQ/jquery/images/ajax-loader.gif
   mput $BQ/jquery/images/icons-png/*
   mput $BQ/jquery/images/icons-svg/*
   dir BQ*.* 
   dir index.html
   cd /php_classes
   mput $PC/*.php
   dir *.php   
   bye

End-Of-Session

fi

########################
# Cleanup
echo =====
echo DONE!
date
# endlocal
